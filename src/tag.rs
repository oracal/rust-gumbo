use ffi = super::ffi;
use std::str::raw::c_str_to_static_slice;
use std::fmt;

#[repr(C)]
pub enum Tag {
    Html,
    Head,
    Title,
    Base,
    Link,
    Meta,
    Style,
    Script,
    Noscript,
    Template,
    Body,
    Article,
    Section,
    Nav,
    Aside,
    H1,
    H2,
    H3,
    H4,
    H5,
    H6,
    Hgroup,
    Header,
    Footer,
    Address,
    P,
    Hr,
    Pre,
    Blockquote,
    Ol,
    Ul,
    Li,
    Dl,
    Dt,
    Dd,
    Figure,
    Figcaption,
    Main,
    Div,
    A,
    Em,
    Strong,
    Small,
    S,
    Cite,
    Q,
    Dfn,
    Abbr,
    Data,
    Time,
    Code,
    Var,
    Samp,
    Kbd,
    Sub,
    Sup,
    I,
    B,
    U,
    Mark,
    Ruby,
    Rt,
    Rp,
    Bdi,
    Bdo,
    Span,
    Br,
    Wbr,
    Ins,
    Del,
    Image,
    Img,
    Iframe,
    Embed,
    Object,
    Param,
    Video,
    Audio,
    Source,
    Track,
    Canvas,
    Map,
    Area,
    Math,
    Mi,
    Mo,
    Mn,
    Ms,
    Mtext,
    Mglyph,
    Malignmark,
    Annotation_xml,
    Svg,
    Foreignobject,
    Desc,
    Table,
    Caption,
    Colgroup,
    Col,
    Tbody,
    Thead,
    Tfoot,
    Tr,
    Td,
    Th,
    Form,
    Fieldset,
    Legend,
    Label,
    Input,
    Button,
    Select,
    Datalist,
    Optgroup,
    Option,
    Textarea,
    Keygen,
    Output,
    Progress,
    Meter,
    Details,
    Summary,
    Menu,
    Menuitem,
    Applet,
    Acronym,
    Bgsound,
    Dir,
    Frame,
    Frameset,
    Noframes,
    Isindex,
    Listing,
    Xmp,
    Nextid,
    Noembed,
    Plaintext,
    Rb,
    Strike,
    Basefont,
    Big,
    Blink,
    Center,
    Font,
    Marquee,
    Multicol,
    Nobr,
    Spacer,
    Tt,
    Unknown,
    Last,
}

impl Tag {
    pub fn tag_name(self) -> &'static str {
        unsafe {
            c_str_to_static_slice(ffi::gumbo_normalized_tagname(self))
        }
    }

    pub fn tag(string: &str) -> Tag {
        unsafe {
            string.with_c_str(|cstr| ffi::gumbo_tag_enum(cstr))
        }
    }
}

impl fmt::Show for Tag {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.tag_name())
    }
}
